// 第一种写法
/*plugins {
    // 应用android插件(在根目录已经定义，所以可以使用),就可以使用android插件预定义的属性与任务
    id 'com.android.application'
}*/
// 第二种写法
apply plugin: 'com.android.application'

// 这个就是android插件的属性？
android {
    // 每个属性都有java 类的方法对应哈
    // 使用顶层目录配置的扩展属性
    compileSdkVersion rootProject.ext.compileSdkVersionxx
    buildToolsVersion "30.0.3"

    // 这个会覆盖androidmanifest.xml 对应的配置
    defaultConfig {
        // applicationId应用的标识, androidmanifest.xml的包名和生成R.java相关
        applicationId "com.darren.optimize.gradledemo"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    /*signingConfigs {
        release {
            storeFile file("../keystore/keystore.jks")
            storePassword "123456"
            keyAlias "wangweijun"
            keyPassword "123456"
        }
    }*/

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // 根据构建类型给生成的BuildConfig注入一个常量(String(字符串需要括号哦), boolean)
            // 都是对应着java类中的方法
            buildConfigField "String", "API_UUL", "\"http://wangweijun.com\""
            buildConfigField "boolean", "LOG_HTTP_CALL", "false"
            // 配置资源值(给strings.xml)
            resValue "string", "app_name_from_build_gradle", "e_release"
        }
        debug {
            // 根据构建类型给生成的BuildConfig注入一个常量
            buildConfigField "String", "API_UUL", "\"http://duanxia.com\""
            buildConfigField "boolean", "LOG_HTTP_CALL", "true"
            // 配置资源值(给strings.xml,增加一个string资源)
            resValue "string", "app_name_from_build_gradle", "e_debug"
        }

        /*applicationVariants.all { variant ->
            variant.outputs.each { output ->
                if ("release".equals(buildType.name)) {
                    def outputFile = output.outputFile
                    def filename = "MiFinance_v" + versionName + "(" + versionCode  + ")" + "_" + releaseTime() + "_" + variant.productFlavors.ext.channel[0] + ".apk"
                    output.outputFile = new File(outputFile.parent, filename);
                }
            }
        }*/
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // 本地依赖包: 在dir目录下(名字想想应该可以改)的后缀为.jar的所有包
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':Mylibrary')
    implementation project(':libFolder:lib2')

    // group name version
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}


/*
android.applicationVariants.all { variant ->
    // 任务代码
    println 'variant = ' + variant
    variant.outputs.each { output ->
        def file = output.outputFile
        // Cannot set the value of read-only property 'outputFile'
        output.outputFile = new File(file.parent,
                file.name.replace(".apk", "-${variant.versionName}.apk"))
    }
}
*/

/*android.applicationVariants.all { variant ->
    // 任务代码
    //variant 代表这个class com.android.build.gradle.api.ApplicationVariant
    println 'variant = ' + variant
    boolean flag = variant.install
    println 'flag = ' + flag
    // 还是不管用
    if (flag) {
        tasks.create(name: "run",
            dependsOn: variant.install) {
            description "installs the dddddddddddd"
            doFirst {
                println 'exec ddddddddddddddddddddd= '
                exec {
                    executable = 'adb'
                    // adb shell am start -n com.darren.optimize.gradledemo/com.darren.optimize.gradledemo.MainActivity
                    args = ['shell', 'am', 'start', '-n', "${variant.applicationId}/.MainActivity"]
                }
            }
        }
    }
}*/

// 应用插件
apply plugin: RunPlugin


//定义插件
class RunPlugin implements Plugin<Project> {
    public static final String EXT_NAME = "tinkerPatch"
    @Override
    void apply(Project project) {
        println " apply image plugin "
//        android.registerTransform(new ImageMonitorTransform())

        def android = project.extensions.android
//        def configuration = project.systrace
        android.applicationVariants.all { variant ->

            println " do tasks variant:"+variant
            // 任务代码
            /*String output = configuration.output
            if (Util.isNullOrNil(output)) {
                configuration.output = project.getBuildDir().getAbsolutePath() + File.separator + "systrace_output"
            }

            if (configuration.enable) {
                SystemTraceTransform.inject(project, variant)
            }*/
        }
    }
}

